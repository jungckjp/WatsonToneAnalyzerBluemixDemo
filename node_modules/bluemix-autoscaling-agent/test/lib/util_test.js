'use strict';
var expect = require('chai').expect;

var fs = require('fs');
var path = require('path');

describe('util', function() {
  var utilObj;
  var testEnvObj;
  beforeEach(function() {
    delete require.cache[require.resolve('../../lib/util.js')];
    utilObj = require(path.join(__dirname, '../../lib/util.js'))();
    testEnvObj = require(path.join(__dirname, 'testEnv.json'));
  });
  context("getApplicationEnv", function() {
    context("when application_env is right", function() {
      beforeEach(function() {
        process.env.VCAP_APPLICATION = JSON.stringify(testEnvObj.VCAP_APPLICATION);
      });
      afterEach(function() {
        process.env.VCAP_APPLICATION = null;
      });
      it("should return appEnv", function() {
        var envObj = utilObj.getApplicationEnv();
        expect(envObj.application_id).to.equal("testAppId");
        expect(envObj.application_name).to.equal("testAppName");
        expect(envObj.instance_id).to.equal("testAppInstanceId");
        expect(envObj.instance_index).to.equal(0);
      });
    });
    context("when application_env is null", function() {
      beforeEach(function() {
        process.env.VCAP_APPLICATION = null;
      });
      afterEach(function() {
        process.env.VCAP_APPLICATION = null;
      });
      it("should return null", function() {
        var envObj = utilObj.getApplicationEnv();
        expect(envObj).to.equal(null);
      });
    });
    context("when application_env is an invalid json string", function() {
      beforeEach(function() {
        process.env.VCAP_APPLICATION = "invalid_json_string";
      });
      afterEach(function() {
        process.env.VCAP_APPLICATION = null;
      });
      it("should return null", function() {
        var envObj = utilObj.getApplicationEnv();
        expect(envObj).to.equal(null);
      });
    });
  });
  context("getServiceEnv", function() {
    context("when VCAP_SERVICES is right", function() {
      beforeEach(function() {
        process.env.VCAP_SERVICES = JSON.stringify(testEnvObj.VCAP_SERVICES);
      });
      afterEach(function() {
        process.env.VCAP_SERVICES = null;
      });
      it("should return ServiceEnv", function() {
        var envObj = utilObj.getServiceEnv();
        expect(envObj.service_id).to.equal("testServiceId");
        expect(envObj.agentUsername).to.equal("agentUsername");
        expect(envObj.agentPassword).to.equal("agentPassword");
        expect(envObj.app_id).to.equal("testAppId");
        expect(envObj.url).to.equal("https://localhost");
      });
    });
    context("when VCAP_SERVICES is null", function() {
      beforeEach(function() {
        process.env.VCAP_SERVICES = null;
      });
      afterEach(function() {
        process.env.VCAP_SERVICES = null;
      });
      it("should return null", function() {
        var envObj = utilObj.getServiceEnv();
        expect(envObj).to.equal(null);
      });
    });
    context("when VCAP_SERVICES is an invalid json string", function() {
      beforeEach(function() {
        process.env.VCAP_SERVICES = "invalid_json_string";
      });
      afterEach(function() {
        process.env.VCAP_SERVICES = null;
      });
      it("should return null", function() {
        var envObj = utilObj.getServiceEnv();
        expect(envObj).to.equal(null);
      });
    });

  });
  context("parseUrlToHostPort", function() {
    var url;
    var result;
    context("only host", function() {
      beforeEach(function() {
        url = "https://localhost";
      });
      it("should return host and default port", function() {
        result = utilObj.parseUrlToHostPort(url);
        expect(result[0]).to.equal("localhost");
        expect(result[1]).to.equal("443");
      });
    });
    context("only host with http", function() {
      beforeEach(function() {
        url = "http://localhost";
      });
      it("should return host and default port", function() {
        result = utilObj.parseUrlToHostPort(url);
        expect(result[0]).to.equal("localhost");
        expect(result[1]).to.equal("443");
      });
    });
    context("only host with https", function() {
      beforeEach(function() {
        url = "https://localhost";
      });
      it("should return host and default port", function() {
        result = utilObj.parseUrlToHostPort(url);
        expect(result[0]).to.equal("localhost");
        expect(result[1]).to.equal("443");
      });
    });
    context("url contains host and port", function() {
      beforeEach(function() {
        url = "https://localhost:8080";
      });
      it("should return host and default port", function() {
        result = utilObj.parseUrlToHostPort(url);
        expect(result[0]).to.equal("localhost");
        expect(result[1]).to.equal("8080");
      });
    });
    context("url with http contains host and port", function() {
      beforeEach(function() {
        url = "http://localhost:8080";
      });
      it("should return host and default port", function() {
        result = utilObj.parseUrlToHostPort(url);
        expect(result[0]).to.equal("localhost");
        expect(result[1]).to.equal("8080");
      });
    });
    context("url with https contains host and port", function() {
      beforeEach(function() {
        url = "https://localhost:8080";
      });
      it("should return host and default port", function() {
        result = utilObj.parseUrlToHostPort(url);
        expect(result[0]).to.equal("localhost");
        expect(result[1]).to.equal("8080");
      });
    });
    context("url is null", function() {
      beforeEach(function() {
        url = null;
      });
      it("should return null", function() {
        result = utilObj.parseUrlToHostPort(url);
        expect(result).to.equal(null);
      });
    });
  });

  context("getCertificates", function() {
    var certPath;
    var ca;
    context("certPath is null", function() {
      beforeEach(function() {
        certPath = null;
      });
      it("should return null", function() {
        ca = utilObj.getCertificates(certPath);
        expect(ca).to.equal(null);
      });
    });
    context("certPath is undefined", function() {
      it("should return null", function() {
        ca = utilObj.getCertificates(undefined);
        expect(ca).to.equal(null);
      });
    });
    context("certPath is not existed", function() {
      beforeEach(function() {
        certPath = "notexist";
      });
      it("should return null", function() {
        ca = utilObj.getCertificates(certPath);
        expect(ca).to.equal(null);
      });
    });
    context("certPath is a file", function() {
      beforeEach(function() {
        certPath = path.join(__dirname, 'util_test.js');
        console.log(certPath)
      });
      it("should return 1", function() {
        ca = utilObj.getCertificates(certPath);
        expect(ca.length).to.equal(1);
      });
    });
    context("certPath is a folder", function() {
      beforeEach(function() {
        certPath = path.join(__dirname);
        console.log(certPath)
      });
      it("should return the number of files in the folder", function() {
        ca = utilObj.getCertificates(certPath);
        expect(ca.length).to.equal(4);
      });
    });
  });

});
