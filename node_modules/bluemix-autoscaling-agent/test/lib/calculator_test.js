'use strict';
var expect = require('chai').expect;

var fs = require('fs');
var path = require('path');

describe('calculator', function() {
  var calculator;
  beforeEach(function() {
    delete require.cache[require.resolve('../../lib/calculator.js')];
    calculator = require(path.join(__dirname, '../../lib/calculator.js'))();
  });
  context("initAppMemory", function() {
    context("when maxHeap, heapSizeLimit, maxSemiSpace, maxOldSpace are integers", function() {
      beforeEach(function() {
        calculator.initAppMemory(100, 200, 300, 400);
      });
      it("should set the relevant attributes", function() {
        expect(calculator.heapStats.maxHeap).to.equal(100);
        expect(calculator.heapStats.heapSizeLimit).to.equal(200);
        expect(calculator.heapStats.maxSemiSpace).to.equal(300);
        expect(calculator.heapStats.maxOldSpace).to.equal(400);
      });
    });
    context("when maxHeap, heapSizeLimit, maxSemiSpace, maxOldSpace are valid integer-format strings", function() {
      beforeEach(function() {
        calculator.initAppMemory("1000", "2000", "3000", "4000");
      });
      it("should set the relevant attributes", function() {
        expect(calculator.heapStats.maxHeap).to.equal(1000);
        expect(calculator.heapStats.heapSizeLimit).to.equal(2000);
        expect(calculator.heapStats.maxSemiSpace).to.equal(3000);
        expect(calculator.heapStats.maxOldSpace).to.equal(4000);
      });
    });
    context("when maxHeap, heapSizeLimit, maxSemiSpace, maxOldSpace are null", function() {
      beforeEach(function() {
        calculator.initAppMemory(null, null, null, null);
      });
      it("should set the heap attributes to default value:0", function() {
        expect(calculator.heapStats.maxHeap).to.equal(0);
        expect(calculator.heapStats.heapSizeLimit).to.equal(0);
        expect(calculator.heapStats.maxSemiSpace).to.equal(0);
        expect(calculator.heapStats.maxOldSpace).to.equal(0);
      });
    });
    context("when maxHeap, heapSizeLimit, maxSemiSpace, maxOldSpace are undefined", function() {
      beforeEach(function() {
        calculator.initAppMemory(undefined, undefined, undefined, undefined);
      });
      it("should set the heap attributes to default value:0", function() {
        expect(calculator.heapStats.maxHeap).to.equal(0);
        expect(calculator.heapStats.heapSizeLimit).to.equal(0);
        expect(calculator.heapStats.maxSemiSpace).to.equal(0);
        expect(calculator.heapStats.maxOldSpace).to.equal(0);
      });
    });
    context("when maxHeap, heapSizeLimit, maxSemiSpace, maxOldSpace are invalid integer-format strings", function() {
      beforeEach(function() {
        calculator.initAppMemory("not-integer1", "not-integer2", "not-integer3", "not-integer4");
      });
      it("should set the heap attributes to default value:0", function() {
        expect(calculator.heapStats.maxHeap).to.equal(0);
        expect(calculator.heapStats.heapSizeLimit).to.equal(0);
        expect(calculator.heapStats.maxSemiSpace).to.equal(0);
        expect(calculator.heapStats.maxOldSpace).to.equal(0);
      });
    });
  });
  context("reset", function() {
    beforeEach(function() {
      calculator.latencyStats = {
        'count': 10,
        'sum': 10,
        'average': 1
      };
      calculator.httpStats = {
        'count': 10,
        'duration': 10,
        'average': 1
      };
      calculator.memoryStats = {
        'count': 10,
        'sum': 10,
        'average': 0
      };
      calculator.cpuStats = {
        'count': 10,
        'sum': 10,
        'average': 0
      };
      calculator.heapStats = {
        'count': 10,
        'usedSum': 10,
        'usedAverage': 1,
        'committed': 10,
        'maxHeap': 10,
        'heapSizeLimit': 10,
        'maxSemiSpace': 10,
        'maxOldSpace': 10
      };
      calculator.throughputStats = {
        'lastCalculateTime': new Date().getTime(),
        'requestCount': 10,
        'throughput': 10
      };
    });
    it("should set all the fields to 0", function() {
      calculator.reset();
      expect(calculator.latencyStats.count).to.equal(0);
      expect(calculator.latencyStats.sum).to.equal(0);
      expect(calculator.latencyStats.average).to.equal(0);
      expect(calculator.httpStats.count).to.equal(0);
      expect(calculator.httpStats.duration).to.equal(0);
      expect(calculator.httpStats.average).to.equal(0);
      expect(calculator.memoryStats.count).to.equal(0);
      expect(calculator.memoryStats.sum).to.equal(0);
      expect(calculator.memoryStats.average).to.equal(0);
      expect(calculator.cpuStats.count).to.equal(0);
      expect(calculator.cpuStats.sum).to.equal(0);
      expect(calculator.cpuStats.average).to.equal(0);
      expect(calculator.heapStats.count).to.equal(0);
      expect(calculator.heapStats.usedSum).to.equal(0);
      expect(calculator.heapStats.usedAverage).to.equal(0);
      expect(calculator.heapStats.committed).to.equal(10);
      expect(calculator.heapStats.maxHeap).to.equal(10);
      expect(calculator.heapStats.heapSizeLimit).to.equal(10);
      expect(calculator.heapStats.maxSemiSpace).to.equal(10);
      expect(calculator.heapStats.maxOldSpace).to.equal(10);
      // expect(calculator.throughputStats.lastCalculateTime).to.equal(0);
      expect(calculator.throughputStats.requestCount).to.equal(0);
      expect(calculator.throughputStats.throughput).to.equal(0);
    });
  });
  context("upadteLatency", function() {
    beforeEach(function() {
      calculator.latencyStats = {
        'count': 10,
        'sum': 10,
        'average': 1
      };
    });
    context("when latency.latency.avg is integer", function() {
      it("should update latency values", function() {
        calculator.updateLatency({ 'latency': { 'avg': 10 } });
        expect(calculator.latencyStats.count).to.equal(11);
        expect(calculator.latencyStats.sum).to.equal(20);
        expect(calculator.latencyStats.average).to.equal(1);
      });
    });
    context("when latency.latency.avg is valid integer-format string", function() {
      it("should update latency values", function() {
        calculator.updateLatency({ 'latency': { 'avg': "10" } });
        expect(calculator.latencyStats.count).to.equal(11);
        expect(calculator.latencyStats.sum).to.equal(20);
        expect(calculator.latencyStats.average).to.equal(1);
      });
    });
    context("when latency.latency.avg is not a valid integer-format string", function() {
      it("should not update latency values", function() {
        calculator.updateLatency({ 'latency': { 'avg': "not-valid-integer" } });
        expect(calculator.latencyStats.count).to.equal(10);
        expect(calculator.latencyStats.sum).to.equal(10);
        expect(calculator.latencyStats.average).to.equal(1);
      });
    });
    context("when latency is null", function() {
      it("should not update latency values", function() {
        calculator.updateLatency(null);
        expect(calculator.latencyStats.count).to.equal(10);
        expect(calculator.latencyStats.sum).to.equal(10);
        expect(calculator.latencyStats.average).to.equal(1);
      });
    });
    context("when latency is undefined", function() {
      it("should not update latency values", function() {
        calculator.updateLatency(undefined);
        expect(calculator.latencyStats.count).to.equal(10);
        expect(calculator.latencyStats.sum).to.equal(10);
        expect(calculator.latencyStats.average).to.equal(1);
      });
    });
    context("when latency.latency is null", function() {
      it("should not update latency values", function() {
        calculator.updateLatency({ 'latency': null });
        expect(calculator.latencyStats.count).to.equal(10);
        expect(calculator.latencyStats.sum).to.equal(10);
        expect(calculator.latencyStats.average).to.equal(1);
      });
    });
    context("when latency.latency is undefined", function() {
      it("should not update latency values", function() {
        calculator.updateLatency({ 'latency': undefined });
        expect(calculator.latencyStats.count).to.equal(10);
        expect(calculator.latencyStats.sum).to.equal(10);
        expect(calculator.latencyStats.average).to.equal(1);
      });
    });
    context("when latency.latency.avg is null", function() {
      it("should not update latency values", function() {
        calculator.updateLatency({ 'latency': { 'avg': null } });
        expect(calculator.latencyStats.count).to.equal(10);
        expect(calculator.latencyStats.sum).to.equal(10);
        expect(calculator.latencyStats.average).to.equal(1);
      });
    });
    context("when latency.latency.avg is undefined", function() {
      it("should not update latency values", function() {
        calculator.updateLatency({ 'latency': { 'avg': undefined } });
        expect(calculator.latencyStats.count).to.equal(10);
        expect(calculator.latencyStats.sum).to.equal(10);
        expect(calculator.latencyStats.average).to.equal(1);
      });
    });

  });
  context("updateHttp", function() {
    beforeEach(function() {
      calculator.httpStats = {
        'count': 10,
        'duration': 10,
        'average': 10
      };
      calculator.throughputStats = {
        'lastCalculateTime': new Date().getTime(),
        'requestCount': 10,
        'throughput': 10
      };
    });
    context("when http.duration is a valid integer", function() {
      it("should update http values", function() {
        calculator.updateHttp({ 'duration': 10 });
        expect(calculator.httpStats.count).to.equal(11);
        expect(calculator.httpStats.duration).to.equal(20);
        expect(calculator.httpStats.average).to.equal(10);
        // expect(calculator.throughputStats.lastCalculateTime).to.equal();
        expect(calculator.throughputStats.requestCount).to.equal(11);
        expect(calculator.throughputStats.throughput).to.equal(10);
      });
    });
    context("when http.duration is a valid integer-format string", function() {
      it("should update http values", function() {
        calculator.updateHttp({ 'duration': '10' });
        expect(calculator.httpStats.count).to.equal(11);
        expect(calculator.httpStats.duration).to.equal(20);
        expect(calculator.httpStats.average).to.equal(10);
        // expect(calculator.throughputStats.lastCalculateTime).to.equal();
        expect(calculator.throughputStats.requestCount).to.equal(11);
        expect(calculator.throughputStats.throughput).to.equal(10);
      });
    });
    context("when http.duration is not a valid integer-format string", function() {
      it("should update http values", function() {
        calculator.updateHttp({ 'duration': 'not-valid-integer' });
        expect(calculator.httpStats.count).to.equal(10);
        expect(calculator.httpStats.duration).to.equal(10);
        expect(calculator.httpStats.average).to.equal(10);
        // expect(calculator.throughputStats.lastCalculateTime).to.equal();
        expect(calculator.throughputStats.requestCount).to.equal(10);
        expect(calculator.throughputStats.throughput).to.equal(10);
      });
    });
    context("when http is null", function() {
      it("should update http values", function() {
        calculator.updateHttp(null);
        expect(calculator.httpStats.count).to.equal(10);
        expect(calculator.httpStats.duration).to.equal(10);
        expect(calculator.httpStats.average).to.equal(10);
        // expect(calculator.throughputStats.lastCalculateTime).to.equal();
        expect(calculator.throughputStats.requestCount).to.equal(10);
        expect(calculator.throughputStats.throughput).to.equal(10);
      });
    });
    context("when http is undefined", function() {
      it("should update http values", function() {
        calculator.updateHttp(undefined);
        expect(calculator.httpStats.count).to.equal(10);
        expect(calculator.httpStats.duration).to.equal(10);
        expect(calculator.httpStats.average).to.equal(10);
        // expect(calculator.throughputStats.lastCalculateTime).to.equal();
        expect(calculator.throughputStats.requestCount).to.equal(10);
        expect(calculator.throughputStats.throughput).to.equal(10);
      });
    });
    context("when http.duration is null", function() {
      it("should update http values", function() {
        calculator.updateHttp({ 'duration': null });
        expect(calculator.httpStats.count).to.equal(10);
        expect(calculator.httpStats.duration).to.equal(10);
        expect(calculator.httpStats.average).to.equal(10);
        // expect(calculator.throughputStats.lastCalculateTime).to.equal();
        expect(calculator.throughputStats.requestCount).to.equal(10);
        expect(calculator.throughputStats.throughput).to.equal(10);
      });
    });
    context("when http.duration is undefined", function() {
      it("should update http values", function() {
        calculator.updateHttp({ 'duration': undefined });
        expect(calculator.httpStats.count).to.equal(10);
        expect(calculator.httpStats.duration).to.equal(10);
        expect(calculator.httpStats.average).to.equal(10);
        // expect(calculator.throughputStats.lastCalculateTime).to.equal();
        expect(calculator.throughputStats.requestCount).to.equal(10);
        expect(calculator.throughputStats.throughput).to.equal(10);
      });
    });

  });
  context("updateMemory", function() {
    beforeEach(function() {
      calculator.memoryStats = {
        'count': 10,
        'sum': 10,
        'average': 10
      };
    });
    context("when memory.physical is a valid integer", function() {
      it("should update memory values", function() {
        calculator.updateMemory({ 'physical': 10 });
        expect(calculator.memoryStats.count).to.equal(11);
        expect(calculator.memoryStats.sum).to.equal(20);
        expect(calculator.memoryStats.average).to.equal(10);
      });
    });
    context("when memory.physical is a valid integer-format string", function() {
      it("should update memory values", function() {
        calculator.updateMemory({ 'physical': "10" });
        expect(calculator.memoryStats.count).to.equal(11);
        expect(calculator.memoryStats.sum).to.equal(20);
        expect(calculator.memoryStats.average).to.equal(10);
      });
    });
    context("when memory.physical is not a valid integer-format string", function() {
      it("should update memory values", function() {
        calculator.updateMemory({ 'physical': "not-valid-integer" });
        expect(calculator.memoryStats.count).to.equal(10);
        expect(calculator.memoryStats.sum).to.equal(10);
        expect(calculator.memoryStats.average).to.equal(10);
      });
    });

    context("when memory is null", function() {
      it("should update memory values", function() {
        calculator.updateMemory(null);
        expect(calculator.memoryStats.count).to.equal(10);
        expect(calculator.memoryStats.sum).to.equal(10);
        expect(calculator.memoryStats.average).to.equal(10);
      });
    });
    context("when memory.physical is undefined", function() {
      it("should update memory values", function() {
        calculator.updateMemory(undefined);
        expect(calculator.memoryStats.count).to.equal(10);
        expect(calculator.memoryStats.sum).to.equal(10);
        expect(calculator.memoryStats.average).to.equal(10);
      });
    });
    context("when memory.physical is null", function() {
      it("should update memory values", function() {
        calculator.updateMemory({ 'physical': null });
        expect(calculator.memoryStats.count).to.equal(10);
        expect(calculator.memoryStats.sum).to.equal(10);
        expect(calculator.memoryStats.average).to.equal(10);
      });
    });
    context("when memory.physical is undefined", function() {
      it("should update memory values", function() {
        calculator.updateMemory({ 'physical': undefined });
        expect(calculator.memoryStats.count).to.equal(10);
        expect(calculator.memoryStats.sum).to.equal(10);
        expect(calculator.memoryStats.average).to.equal(10);
      });
    });

  });
  context("updateCpu", function() {
    beforeEach(function() {
      calculator.cpuStats = {
        'count': 10,
        'sum': 10,
        'average': 10
      };
    });
    context("when cpu.process is a invalid number", function() {
      it("should update cpu values", function() {
        calculator.updateCpu({ 'process': 0.1 });
        expect(calculator.cpuStats.count).to.equal(11);
        expect(calculator.cpuStats.sum).to.equal(20);
        expect(calculator.cpuStats.average).to.equal(10);
      });
    });
    context("when cpu.process is a invalid number-format string", function() {
      it("should update cpu values", function() {
        calculator.updateCpu({ 'process': '0.1' });
        expect(calculator.cpuStats.count).to.equal(11);
        expect(calculator.cpuStats.sum).to.equal(20);
        expect(calculator.cpuStats.average).to.equal(10);
      });
    });
    context("when cpu.process is not a invalid number-format string", function() {
      it("should update cpu values", function() {
        calculator.updateCpu({ 'process': 'not-valid-number' });
        expect(calculator.cpuStats.count).to.equal(10);
        expect(calculator.cpuStats.sum).to.equal(10);
        expect(calculator.cpuStats.average).to.equal(10);
      });
    });

    context("when cpu is null", function() {
      it("should update cpu values", function() {
        calculator.updateCpu(null);
        expect(calculator.cpuStats.count).to.equal(10);
        expect(calculator.cpuStats.sum).to.equal(10);
        expect(calculator.cpuStats.average).to.equal(10);
      });
    });
    context("when cpu is undefined", function() {
      it("should update cpu values", function() {
        calculator.updateCpu(undefined);
        expect(calculator.cpuStats.count).to.equal(10);
        expect(calculator.cpuStats.sum).to.equal(10);
        expect(calculator.cpuStats.average).to.equal(10);
      });
    });
    context("when cpu.process is null", function() {
      it("should update cpu values", function() {
        calculator.updateCpu({ 'process': null });
        expect(calculator.cpuStats.count).to.equal(10);
        expect(calculator.cpuStats.sum).to.equal(10);
        expect(calculator.cpuStats.average).to.equal(10);
      });
    });
    context("when cpu.process undefined", function() {
      it("should update cpu values", function() {
        calculator.updateCpu({ 'process': undefined });
        expect(calculator.cpuStats.count).to.equal(10);
        expect(calculator.cpuStats.sum).to.equal(10);
        expect(calculator.cpuStats.average).to.equal(10);
      });
    });

  });
  context("updateHeap", function() {
    beforeEach(function() {
      calculator.heapStats = {
        'count': 10,
        'usedSum': 10,
        'usedAverage': 10,
        'committed': 10,
        'maxHeap': 100,
        'heapSizeLimit': 100,
        'maxSemiSpace': 100,
        'maxOldSpace': 100
      };
    });
    context("when heap.used and heap.size are valid integer", function() {
      it("should update heap values", function() {
        calculator.updateHeap({ 'used': 10, 'size': 20 });
        expect(calculator.heapStats.count).to.equal(11);
        expect(calculator.heapStats.usedSum).to.equal(20);
        expect(calculator.heapStats.usedAverage).to.equal(10);
        expect(calculator.heapStats.committed).to.equal(20);
        expect(calculator.heapStats.maxHeap).to.equal(100);
        expect(calculator.heapStats.heapSizeLimit).to.equal(100);
        expect(calculator.heapStats.maxSemiSpace).to.equal(100);
        expect(calculator.heapStats.maxOldSpace).to.equal(100);
      });
    });
    context("when heap.used and heap.size are valid integer-format strings", function() {
      it("should update heap values", function() {
        calculator.updateHeap({ 'used': '10', 'size': '20' });
        expect(calculator.heapStats.count).to.equal(11);
        expect(calculator.heapStats.usedSum).to.equal(20);
        expect(calculator.heapStats.usedAverage).to.equal(10);
        expect(calculator.heapStats.committed).to.equal(20);
        expect(calculator.heapStats.maxHeap).to.equal(100);
        expect(calculator.heapStats.heapSizeLimit).to.equal(100);
        expect(calculator.heapStats.maxSemiSpace).to.equal(100);
        expect(calculator.heapStats.maxOldSpace).to.equal(100);
      });
    });
    context("when heap.used and heap.size are not valid integer-format strings", function() {
      it("should update heap values", function() {
        calculator.updateHeap({ 'used': 'not-valid-integer', 'size': 'not-valid-integer' });
        expect(calculator.heapStats.count).to.equal(10);
        expect(calculator.heapStats.usedSum).to.equal(10);
        expect(calculator.heapStats.usedAverage).to.equal(10);
        expect(calculator.heapStats.committed).to.equal(10);
        expect(calculator.heapStats.maxHeap).to.equal(100);
        expect(calculator.heapStats.heapSizeLimit).to.equal(100);
        expect(calculator.heapStats.maxSemiSpace).to.equal(100);
        expect(calculator.heapStats.maxOldSpace).to.equal(100);
      });
    });

    context("when heap are null", function() {
      it("should update heap values", function() {
        calculator.updateHeap(null);
        expect(calculator.heapStats.count).to.equal(10);
        expect(calculator.heapStats.usedSum).to.equal(10);
        expect(calculator.heapStats.usedAverage).to.equal(10);
        expect(calculator.heapStats.committed).to.equal(10);
        expect(calculator.heapStats.maxHeap).to.equal(100);
        expect(calculator.heapStats.heapSizeLimit).to.equal(100);
        expect(calculator.heapStats.maxSemiSpace).to.equal(100);
        expect(calculator.heapStats.maxOldSpace).to.equal(100);
      });
    });
    context("when heap are undefined", function() {
      it("should update heap values", function() {
        calculator.updateHeap(undefined);
        expect(calculator.heapStats.count).to.equal(10);
        expect(calculator.heapStats.usedSum).to.equal(10);
        expect(calculator.heapStats.usedAverage).to.equal(10);
        expect(calculator.heapStats.committed).to.equal(10);
        expect(calculator.heapStats.maxHeap).to.equal(100);
        expect(calculator.heapStats.heapSizeLimit).to.equal(100);
        expect(calculator.heapStats.maxSemiSpace).to.equal(100);
        expect(calculator.heapStats.maxOldSpace).to.equal(100);
      });
    });
    context("when heap.used and heap.size are null", function() {
      it("should update heap values", function() {
        calculator.updateHeap({ 'used': null, 'size': null });
        expect(calculator.heapStats.count).to.equal(10);
        expect(calculator.heapStats.usedSum).to.equal(10);
        expect(calculator.heapStats.usedAverage).to.equal(10);
        expect(calculator.heapStats.committed).to.equal(10);
        expect(calculator.heapStats.maxHeap).to.equal(100);
        expect(calculator.heapStats.heapSizeLimit).to.equal(100);
        expect(calculator.heapStats.maxSemiSpace).to.equal(100);
        expect(calculator.heapStats.maxOldSpace).to.equal(100);
      });
    });
    context("when heap.used and heap.size are undefined", function() {
      it("should update heap values", function() {
        calculator.updateHeap({ 'used': undefined, 'size': undefined });
        expect(calculator.heapStats.count).to.equal(10);
        expect(calculator.heapStats.usedSum).to.equal(10);
        expect(calculator.heapStats.usedAverage).to.equal(10);
        expect(calculator.heapStats.committed).to.equal(10);
        expect(calculator.heapStats.maxHeap).to.equal(100);
        expect(calculator.heapStats.heapSizeLimit).to.equal(100);
        expect(calculator.heapStats.maxSemiSpace).to.equal(100);
        expect(calculator.heapStats.maxOldSpace).to.equal(100);
      });
    });

  });
  context("calculate", function() {
    beforeEach(function() {
      calculator.latencyStats = {
        'count': 10,
        'sum': 100,
        'average': 1
      };
      calculator.httpStats = {
        'count': 10,
        'duration': 1000,
        'average': 1
      };
      calculator.memoryStats = {
        'count': 10,
        'sum': 100,
        'average': 1
      };
      calculator.cpuStats = {
        'count': 10,
        'sum': 100,
        'average': 1
      };
      calculator.heapStats = {
        'count': 10,
        'usedSum': 100,
        'usedAverage': 1,
        'committed': 10,
        'maxHeap': 10,
        'heapSizeLimit': 10,
        'maxSemiSpace': 10,
        'maxOldSpace': 10
      };
      calculator.throughputStats = {
        'lastCalculateTime': new Date().getTime() - 1000,
        'requestCount': 100,
        'throughput': 10
      };
    });
    it("should return the calculate result", function() {
      var result = calculator.calculate();

      expect(result.eventloopLatency).to.equal(10);
      expect(result.responseTime).to.equal(110);
      expect(result.memory).to.equal(10);
      expect(result.cpu).to.equal(10);
      expect(result.heap.used).to.equal(10);
      expect(result.heap.committed).to.equal(10);
      expect(result.heap.max).to.equal(10);
      expect(result.throughput).to.equal((100 / (calculator.throughputStats.duration / 1000)));
    });
  });

});
